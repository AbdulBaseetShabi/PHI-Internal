{"ast":null,"code":"var _jsxFileName = \"/Users/saifal-dinali/Desktop/Projects/React Projects/PhiInternal/PHI-Internal/client/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Axios from 'axios';\nimport Home from './components/Pages/Home';\nimport Login from './components/Auth/Login';\nimport Register from './components/Auth/Register';\nimport Header from './components/Layout/Header';\nimport UserContext from './context/UserContext';\nexport default function App() {\n  const [userData, setUserData] = useState({\n    token: undefined,\n    user: undefined\n  });\n  useEffect(() => {\n    //Because you can't set useEffect to be asynchronous we have to define an asynchronous function within it\n    const checkLoggedIn = async () => {\n      //Right now we are just using local storage to retrieve the tokens\n      let token = localStorage.getItem(\"auth-token\");\n\n      if (token === null) {\n        localStorage.setItem(\"auth-token\", \"\");\n        token = \"\";\n      }\n\n      const tokenResponse = await Axios.post(\"http://localhost:5000/users/tokenIsValid\", null, {\n        headers: {\n          \"x-auth-token\": token\n        }\n      });\n\n      if (tokenResponse.data) {}\n\n      console.log(tokenResponse.data);\n    };\n\n    checkLoggedIn();\n  }, []); //Second parameter is states and runs it when that state is changed, keeping the array empty means that ti'll run only once when the app starts\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      userData,\n      setUserData\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    component: Home,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/login\",\n    component: Login,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/register\",\n    component: Register,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/saifal-dinali/Desktop/Projects/React Projects/PhiInternal/PHI-Internal/client/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","Switch","Route","Axios","Home","Login","Register","Header","UserContext","App","userData","setUserData","token","undefined","user","checkLoggedIn","localStorage","getItem","setItem","tokenResponse","post","headers","data","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,MAAxB,EAAgCC,KAAhC,QAA6C,kBAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC;AACvCc,IAAAA,KAAK,EAAEC,SADgC;AAEvCC,IAAAA,IAAI,EAAED;AAFiC,GAAD,CAAxC;AAKAd,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMgB,aAAa,GAAG,YAAY;AAC/B;AACA,UAAIH,KAAK,GAAGI,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAZ;;AACA,UAAIL,KAAK,KAAK,IAAd,EAAoB;AAClBI,QAAAA,YAAY,CAACE,OAAb,CAAqB,YAArB,EAAmC,EAAnC;AACAN,QAAAA,KAAK,GAAG,EAAR;AACD;;AACD,YAAMO,aAAa,GAAG,MAAMhB,KAAK,CAACiB,IAAN,CAC1B,0CAD0B,EAE1B,IAF0B,EAG1B;AACEC,QAAAA,OAAO,EAAE;AAAE,0BAAgBT;AAAlB;AADX,OAH0B,CAA5B;;AAQA,UAAIO,aAAa,CAACG,IAAlB,EAAwB,CAEvB;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAYL,aAAa,CAACG,IAA1B;AACF,KAnBD;;AAqBAP,IAAAA,aAAa;AACd,GAxBQ,EAwBN,EAxBM,CAAT,CAN4B,CA+B5B;;AAEA,sBACE,uDACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEL,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,GAAlB;AAAsB,IAAA,SAAS,EAAEP,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,SAAS,EAAEC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,WAAZ;AAAwB,IAAA,SAAS,EAAEC,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAFF,CADF,CADF,CADF;AAcD","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Axios from 'axios';\nimport Home from './components/Pages/Home';\nimport Login from './components/Auth/Login';\nimport Register from './components/Auth/Register';\nimport Header from './components/Layout/Header';\nimport UserContext from './context/UserContext';\n\nexport default function App() {\n  const [userData, setUserData] = useState({\n    token: undefined,\n    user: undefined,\n  });\n\n  useEffect(() => {\n    //Because you can't set useEffect to be asynchronous we have to define an asynchronous function within it\n    const checkLoggedIn = async () => {\n       //Right now we are just using local storage to retrieve the tokens\n       let token = localStorage.getItem(\"auth-token\");\n       if (token === null) {\n         localStorage.setItem(\"auth-token\", \"\");\n         token = \"\";\n       }\n       const tokenResponse = await Axios.post(\n         \"http://localhost:5000/users/tokenIsValid\",\n         null,\n         {\n           headers: { \"x-auth-token\": token }\n         }\n       );\n\n       if (tokenResponse.data) {\n\n       }\n       console.log(tokenResponse.data);\n    };\n\n    checkLoggedIn();\n  }, []);\n  //Second parameter is states and runs it when that state is changed, keeping the array empty means that ti'll run only once when the app starts\n\n  return (\n    <>\n      <BrowserRouter>\n        <UserContext.Provider value={{ userData, setUserData }}>\n          <Header />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/register\" component={Register} />\n          </Switch>\n        </UserContext.Provider>\n      </BrowserRouter>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}