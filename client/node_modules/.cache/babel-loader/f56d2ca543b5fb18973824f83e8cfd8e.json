{"ast":null,"code":"var _jsxFileName = \"/Users/saifal-dinali/Desktop/Projects/React Projects/PhiInternal/PHI-Internal/client/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Axios from 'axios';\nimport Home from './components/Pages/Home';\nimport Login from './components/Auth/Login';\nimport Register from './components/Auth/Register';\nimport Header from './components/Layout/Header';\nimport UserContext from './context/UserContext';\nexport default function App() {\n  //Context provider creates a state to share with other components\n  //All of the other components will have access to the userData and setUserData objects\n  const [userData, setUserData] = useState({\n    token: undefined,\n    user: undefined\n  });\n  useEffect(() => {\n    //Because you can't set useEffect to be asynchronous we have to define an asynchronous function within it\n    const checkLoggedIn = async () => {\n      //Right now we are just using local storage to retrieve the tokens\n      //Grab current token\n      let token = localStorage.getItem(\"auth-token\"); //Check for invalid token\n\n      if (token === null) {\n        localStorage.setItem(\"auth-token\", \"\");\n        token = \"\";\n      }\n\n      const tokenRes = await Axios.post(\"http://localhost:5000/users/tokenIsValid\", null, {\n        headers: {\n          \"x-auth-token\": token\n        }\n      });\n\n      if (tokenRes.data) {\n        const userRes = await Axios.get(\"http://localhost:5000/users/\", {\n          headers: {\n            \"x-auth-token\": token\n          }\n        });\n        setUserData({\n          token,\n          user: userRes.data\n        });\n      }\n\n      console.log(tokenRes.data);\n    };\n\n    checkLoggedIn();\n  }, []); //Second parameter is states and runs it when that state is changed, keeping the array empty means that ti'll run only once when the app starts\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      userData,\n      setUserData\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    component: Home,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/login\",\n    component: Login,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/register\",\n    component: Register,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/saifal-dinali/Desktop/Projects/React Projects/PhiInternal/PHI-Internal/client/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","Switch","Route","Axios","Home","Login","Register","Header","UserContext","App","userData","setUserData","token","undefined","user","checkLoggedIn","localStorage","getItem","setItem","tokenRes","post","headers","data","userRes","get","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,EAAwBC,MAAxB,EAAgCC,KAAhC,QAA6C,kBAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B;AACA;AAEA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC;AACvCc,IAAAA,KAAK,EAAEC,SADgC;AAEvCC,IAAAA,IAAI,EAAED;AAFiC,GAAD,CAAxC;AAKAd,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMgB,aAAa,GAAG,YAAY;AAC/B;AACA;AACA,UAAIH,KAAK,GAAGI,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAZ,CAH+B,CAK/B;;AACA,UAAIL,KAAK,KAAK,IAAd,EAAoB;AAClBI,QAAAA,YAAY,CAACE,OAAb,CAAqB,YAArB,EAAmC,EAAnC;AACAN,QAAAA,KAAK,GAAG,EAAR;AACD;;AAED,YAAMO,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAN,CACrB,0CADqB,EAErB,IAFqB,EAGrB;AACEC,QAAAA,OAAO,EAAE;AAAE,0BAAgBT;AAAlB;AADX,OAHqB,CAAvB;;AAQA,UAAIO,QAAQ,CAACG,IAAb,EAAmB;AACjB,cAAMC,OAAO,GAAG,MAAMpB,KAAK,CAACqB,GAAN,CAAU,8BAAV,EACrB;AACEH,UAAAA,OAAO,EAAE;AAAC,4BAAgBT;AAAjB;AADX,SADqB,CAAtB;AAKAD,QAAAA,WAAW,CAAC;AACVC,UAAAA,KADU;AAEVE,UAAAA,IAAI,EAAES,OAAO,CAACD;AAFJ,SAAD,CAAX;AAID;;AACDG,MAAAA,OAAO,CAACC,GAAR,CAAYP,QAAQ,CAACG,IAArB;AACF,KA/BD;;AAiCAP,IAAAA,aAAa;AACd,GApCQ,EAoCN,EApCM,CAAT,CAT4B,CA8C5B;;AAEA,sBACE,uDACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEL,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,GAAlB;AAAsB,IAAA,SAAS,EAAEP,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,SAAS,EAAEC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,WAAZ;AAAwB,IAAA,SAAS,EAAEC,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAFF,CADF,CADF,CADF;AAcD","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Axios from 'axios';\nimport Home from './components/Pages/Home';\nimport Login from './components/Auth/Login';\nimport Register from './components/Auth/Register';\nimport Header from './components/Layout/Header';\nimport UserContext from './context/UserContext';\n\nexport default function App() {\n  //Context provider creates a state to share with other components\n  //All of the other components will have access to the userData and setUserData objects\n\n  const [userData, setUserData] = useState({\n    token: undefined,\n    user: undefined,\n  });\n\n  useEffect(() => {\n    //Because you can't set useEffect to be asynchronous we have to define an asynchronous function within it\n    const checkLoggedIn = async () => {\n       //Right now we are just using local storage to retrieve the tokens\n       //Grab current token\n       let token = localStorage.getItem(\"auth-token\");\n\n       //Check for invalid token\n       if (token === null) {\n         localStorage.setItem(\"auth-token\", \"\");\n         token = \"\";\n       }\n\n       const tokenRes = await Axios.post(\n         \"http://localhost:5000/users/tokenIsValid\",\n         null,\n         {\n           headers: { \"x-auth-token\": token }\n         }\n       );\n\n       if (tokenRes.data) {\n         const userRes = await Axios.get(\"http://localhost:5000/users/\",\n          {\n            headers: {\"x-auth-token\": token},\n          }\n         );\n         setUserData({\n           token,\n           user: userRes.data,\n         })\n       }\n       console.log(tokenRes.data);\n    };\n\n    checkLoggedIn();\n  }, []);\n  //Second parameter is states and runs it when that state is changed, keeping the array empty means that ti'll run only once when the app starts\n\n  return (\n    <>\n      <BrowserRouter>\n        <UserContext.Provider value={{ userData, setUserData }}>\n          <Header />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/register\" component={Register} />\n          </Switch>\n        </UserContext.Provider>\n      </BrowserRouter>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}