{"ast":null,"code":"var _jsxFileName = \"/Users/saifal-dinali/Desktop/Projects/React Projects/PhiInternal/PHI-Internal/client/src/contexts/AuthContext.js\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { auth } from \"../firebase\";\nconst AuthContext = React.createContext();\nexport function useAuth() {\n  return useContext(AuthContext);\n} //An Authprovider is an object that handles authentication and authorization logic.\n\nexport function AuthProvider({\n  children\n}) {\n  //Get the current user and loading states\n  const [currentUser, setCurrentUser] = useState();\n  const [loading, setLoading] = useState(true); //Use a function by Firebase to create a user from email and password\n\n  function signup(email, password) {\n    return auth.createUserWithEmailAndPassword(email, password);\n  } //Run the firebase function to sign users in\n\n\n  function login(email, password) {\n    return auth.signInWithEmailAndPassword(email, password);\n  } //Run logout function\n\n\n  function logout() {\n    return auth.signOut();\n  } //Send an email to the user to reset password\n\n\n  function resetPassword(email) {\n    return auth.sendPasswordResetEmail(email);\n  } //Allow users to update their email\n\n\n  function updateEmail(email) {\n    return currentUser.updateEmail(email);\n  } //Allow users to update their password\n\n\n  function updatePassword(password) {\n    return currentUser.updatePassword(password);\n  } //Runs the function only once, at the initial render\n\n\n  useEffect(() => {\n    //Check to see whether the user is signed in or not\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      setCurrentUser(user);\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []); //Gather the values for the auth provider\n\n  const value = {\n    currentUser,\n    login,\n    signup,\n    logout,\n    resetPassword,\n    updateEmail,\n    updatePassword\n  };\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, !loading && children);\n}","map":{"version":3,"sources":["/Users/saifal-dinali/Desktop/Projects/React Projects/PhiInternal/PHI-Internal/client/src/contexts/AuthContext.js"],"names":["React","useContext","useState","useEffect","auth","AuthContext","createContext","useAuth","AuthProvider","children","currentUser","setCurrentUser","loading","setLoading","signup","email","password","createUserWithEmailAndPassword","login","signInWithEmailAndPassword","logout","signOut","resetPassword","sendPasswordResetEmail","updateEmail","updatePassword","unsubscribe","onAuthStateChanged","user","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,IAAT,QAAqB,aAArB;AAEA,MAAMC,WAAW,GAAGL,KAAK,CAACM,aAAN,EAApB;AAEA,OAAO,SAASC,OAAT,GAAmB;AACxB,SAAON,UAAU,CAACI,WAAD,CAAjB;AACD,C,CAED;;AACA,OAAO,SAASG,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AACzC;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,EAA9C;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC,CAHyC,CAKzC;;AACA,WAASY,MAAT,CAAgBC,KAAhB,EAAuBC,QAAvB,EAAiC;AAC/B,WAAOZ,IAAI,CAACa,8BAAL,CAAoCF,KAApC,EAA2CC,QAA3C,CAAP;AACD,GARwC,CAUzC;;;AACA,WAASE,KAAT,CAAeH,KAAf,EAAsBC,QAAtB,EAAgC;AAC9B,WAAOZ,IAAI,CAACe,0BAAL,CAAgCJ,KAAhC,EAAuCC,QAAvC,CAAP;AACD,GAbwC,CAezC;;;AACA,WAASI,MAAT,GAAkB;AAChB,WAAOhB,IAAI,CAACiB,OAAL,EAAP;AACD,GAlBwC,CAoBzC;;;AACA,WAASC,aAAT,CAAuBP,KAAvB,EAA8B;AAC5B,WAAOX,IAAI,CAACmB,sBAAL,CAA4BR,KAA5B,CAAP;AACD,GAvBwC,CAyBzC;;;AACA,WAASS,WAAT,CAAqBT,KAArB,EAA4B;AAC1B,WAAOL,WAAW,CAACc,WAAZ,CAAwBT,KAAxB,CAAP;AACD,GA5BwC,CA8BzC;;;AACA,WAASU,cAAT,CAAwBT,QAAxB,EAAkC;AAChC,WAAON,WAAW,CAACe,cAAZ,CAA2BT,QAA3B,CAAP;AACD,GAjCwC,CAmCzC;;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMuB,WAAW,GAAGtB,IAAI,CAACuB,kBAAL,CAAwBC,IAAI,IAAI;AAClDjB,MAAAA,cAAc,CAACiB,IAAD,CAAd;AACAf,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAHmB,CAApB;AAKA,WAAOa,WAAP;AACD,GARQ,EAQN,EARM,CAAT,CApCyC,CA8CzC;;AACA,QAAMG,KAAK,GAAG;AACZnB,IAAAA,WADY;AAEZQ,IAAAA,KAFY;AAGZJ,IAAAA,MAHY;AAIZM,IAAAA,MAJY;AAKZE,IAAAA,aALY;AAMZE,IAAAA,WANY;AAOZC,IAAAA;AAPY,GAAd;AAUA,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEI,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACjB,OAAD,IAAYH,QADf,CADF;AAKD","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\"\nimport { auth } from \"../firebase\"\n\nconst AuthContext = React.createContext()\n\nexport function useAuth() {\n  return useContext(AuthContext)\n}\n\n//An Authprovider is an object that handles authentication and authorization logic.\nexport function AuthProvider({ children }) {\n  //Get the current user and loading states\n  const [currentUser, setCurrentUser] = useState()\n  const [loading, setLoading] = useState(true)\n\n  //Use a function by Firebase to create a user from email and password\n  function signup(email, password) {\n    return auth.createUserWithEmailAndPassword(email, password)\n  }\n\n  //Run the firebase function to sign users in\n  function login(email, password) {\n    return auth.signInWithEmailAndPassword(email, password)\n  }\n\n  //Run logout function\n  function logout() {\n    return auth.signOut()\n  }\n\n  //Send an email to the user to reset password\n  function resetPassword(email) {\n    return auth.sendPasswordResetEmail(email)\n  }\n\n  //Allow users to update their email\n  function updateEmail(email) {\n    return currentUser.updateEmail(email)\n  }\n\n  //Allow users to update their password\n  function updatePassword(password) {\n    return currentUser.updatePassword(password)\n  }\n\n  //Runs the function only once, at the initial render\n  useEffect(() => {\n    //Check to see whether the user is signed in or not\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      setCurrentUser(user)\n      setLoading(false)\n    })\n\n    return unsubscribe\n  }, [])\n\n  //Gather the values for the auth provider\n  const value = {\n    currentUser,\n    login,\n    signup,\n    logout,\n    resetPassword,\n    updateEmail,\n    updatePassword\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}